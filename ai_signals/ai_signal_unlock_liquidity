import os
import openai
from supabase import create_client, Client
from datetime import datetime, timezone

# ========= ENV =========
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

sb: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
openai.api_key = OPENAI_API_KEY

def fetch_signals():
    """Fetch fresh rows from v_signal_unlock_liquidity_whales"""
    query = sb.table("v_signal_unlock_liquidity_whales").select("*").execute()
    return query.data

def ai_enrich(signal):
    """Send signal context to OpenAI for short reasoning confirmation"""
    prompt = f"""
    Token: {signal['coin_symbol']}
    Trade Signal: {signal['final_trade_signal']}
    Buy Signal %: {signal['buy_signal_percent']}
    Risk Signal %: {signal['risk_signal_percent']}
    Confidence Score: {signal['confidence_score']}
    Rationale: {signal['rationale']}

    Use the following sources for confirmation:
    - Dropstab Unlock Data (internal): {signal['droptab_url']}
    - Coinglass Heatmap (internal): {signal['coinglass_url']}
    - Coingecko Market Data (internal): {signal['coingecko_url']}

    Write a concise 2–3 sentence trading insight.
    Do NOT include raw URLs — instead mention them as “Dropstab” or “Coinglass” to support reasoning.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a professional crypto trading analyst."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=200
    )

    return response["choices"][0]["message"]["content"].strip()

def store_ai_signal(signal, ai_summary):
    """Insert enriched AI signal into ai_signals table"""
    row = {
        "id": signal["signal_id"],
        "coin_symbol": signal["coin_symbol"],
        "final_trade_signal": signal["final_trade_signal"],
        "buy_signal_percent": signal["buy_signal_percent"],
        "risk_signal_percent": signal["risk_signal_percent"],
        "confidence_score": signal["confidence_score"],
        "rationale": signal["rationale"],
        "ai_summary": ai_summary,
        "droptab_url": signal["droptab_url"],
        "coinglass_url": signal["coinglass_url"],
        "coingecko_url": signal["coingecko_url"],
        "created_at": datetime.now(timezone.utc).isoformat()
    }
    sb.table("ai_signals").upsert(row).execute()

def run_job():
    signals = fetch_signals()
    for sig in signals:
        try:
            ai_summary = ai_enrich(sig)
            store_ai_signal(sig, ai_summary)
            print(f"✅ Stored AI signal for {sig['coin_symbol']}")
        except Exception as e:
            print(f"❌ Error with {sig['coin_symbol']}: {e}")

if __name__ == "__main__":
    run_job()
